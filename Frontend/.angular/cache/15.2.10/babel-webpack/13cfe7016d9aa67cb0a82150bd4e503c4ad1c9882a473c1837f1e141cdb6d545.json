{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseURL = \"http://localhost:8080/api/v1/accounts\";\n  }\n  login(emailId, password) {\n    const info = {\n      emailId: emailId,\n      password: password\n    };\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post('http://localhost:8080/api/v1/login', params);\n  }\n  initAccount(id, userName) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      userName: userName\n    };\n    // @ts-ignore\n    return this.httpClient.put('http://localhost:8080/api/v1/user/updateAccount/' + id, JSON.stringify(info), {\n      headers: httpHeaders,\n      responseType: 'text'\n    });\n  }\n  updateAccount(id, emailId, phone) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      emailId: emailId,\n      phone: phone\n    };\n    // @ts-ignore\n    return this.httpClient.put('http://localhost:8080/api/v1/user/updateAccount/' + id, JSON.stringify(info), {\n      headers: httpHeaders,\n      responseType: 'text'\n    });\n  }\n  resetPassword(id, password, oldPassword) {\n    const info = {\n      id: id,\n      password: password,\n      oldPassword: oldPassword\n    };\n    const params = new HttpParams({\n      fromObject: info\n    });\n    // @ts-ignore\n    return this.httpClient.post('http://localhost:8080/api/v1/user/resetPassword/' + id, params, {\n      responseType: 'text'\n    });\n  }\n  adminUpdateAccount(id, emailId, phone, level) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      emailId: emailId,\n      phone: phone,\n      level: level\n    };\n    // @ts-ignore\n    return this.httpClient.put('http://localhost:8080/api/v1/admin/updateUserAccount', JSON.stringify(info), {\n      headers: httpHeaders,\n      responseType: 'text'\n    });\n  }\n  adminResetAccountPassword(id, password) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: id,\n      password: password\n    };\n    // @ts-ignore\n    return this.httpClient.put('http://localhost:8080/api/v1/admin/resetUserPassword', JSON.stringify(info), {\n      headers: httpHeaders,\n      responseType: 'text'\n    });\n  }\n  adminCreateAccount(emailId, password, role) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      emailId: emailId,\n      password: password,\n      role: role\n    };\n    // @ts-ignore\n    return this.httpClient.post('http://localhost:8080/api/v1/admin/createAccount', JSON.stringify(info), {\n      headers: httpHeaders,\n      responseType: 'text'\n    });\n  }\n  getAccountById(id) {\n    return this.httpClient.get(`${this.baseURL}` + \"/\" + id);\n  }\n  adminDeleteAccountById(id) {\n    // @ts-ignore\n    return this.httpClient.delete(\"http://localhost:8080/api/v1/admin/deleteAccount/\" + id, {\n      responseType: 'text'\n    });\n  }\n  search(id, userName, emailId, phone, minLevel, maxLevel, role) {\n    const info = {\n      id: id,\n      userName: userName,\n      emailId: emailId,\n      phone: phone,\n      minLevel: minLevel,\n      maxLevel: maxLevel,\n      role: role\n    };\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post('http://localhost:8080/api/v1/admin/searchAccount', params);\n  }\n  static #_ = this.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,EAAEC,UAAU,QAAO,sBAAsB;;;AAQxE,OAAM,MAAOC,cAAc;EAKzBC,YAAoBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;IAFtB,YAAO,GAAG,uCAAuC;EAGvD;EAEFC,KAAK,CAACC,OAAc,EAAEC,QAAe;IAEnC,MAAMC,IAAI,GAAG;MACXF,OAAO,EAAEA,OAAO;MAChBC,QAAQ,EAAEA;KACX;IACD,MAAME,MAAM,GAAG,IAAIR,UAAU,CAAC;MAC5BS,UAAU,EAAEF;KACb,CAAC;IACF,OAAO,IAAI,CAACJ,UAAU,CAACO,IAAI,CAAU,oCAAoC,EAAEF,MAAM,CAAC;EACpF;EAEAG,WAAW,CAACC,EAAS,EAAEC,QAAe;IAEpC,MAAMC,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMR,IAAI,GACR;MACEK,EAAE,EAAEA,EAAE;MACNC,QAAQ,EAAEA;KACX;IACH;IACA,OAAO,IAAI,CAACV,UAAU,CAACa,GAAG,CAAS,kDAAkD,GAAGJ,EAAE,EAAEK,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE;MAACY,OAAO,EAAEL,WAAW;MAAEM,YAAY,EAAE;IAAM,CAAC,CAAC;EACjK;EAEAC,aAAa,CAACT,EAAS,EAAEP,OAAc,EAAEiB,KAAY;IAEnD,MAAMR,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMR,IAAI,GACR;MACEK,EAAE,EAAEA,EAAE;MACNP,OAAO,EAAEA,OAAO;MAChBiB,KAAK,EAAEA;KACR;IACH;IACA,OAAO,IAAI,CAACnB,UAAU,CAACa,GAAG,CAAS,kDAAkD,GAAGJ,EAAE,EAAEK,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE;MAACY,OAAO,EAAEL,WAAW;MAAEM,YAAY,EAAE;IAAM,CAAC,CAAC;EACjK;EAEAG,aAAa,CAACX,EAAS,EAAEN,QAAe,EAAEkB,WAAkB;IAE1D,MAAMjB,IAAI,GAAG;MACXK,EAAE,EAAEA,EAAE;MACNN,QAAQ,EAAEA,QAAQ;MAClBkB,WAAW,EAAEA;KACd;IACD,MAAMhB,MAAM,GAAG,IAAIR,UAAU,CAAC;MAC5BS,UAAU,EAAEF;KACb,CAAC;IACF;IACA,OAAO,IAAI,CAACJ,UAAU,CAACO,IAAI,CAAS,kDAAkD,GAAGE,EAAE,EAAEJ,MAAM,EAAE;MAACY,YAAY,EAAE;IAAM,CAAC,CAAC;EAC9H;EAGAK,kBAAkB,CAACb,EAAS,EAAEP,OAAc,EAAEiB,KAAY,EAAEI,KAAY;IAEtE,MAAMZ,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMR,IAAI,GACR;MACEK,EAAE,EAACA,EAAE;MACLP,OAAO,EAAEA,OAAO;MAChBiB,KAAK,EAAEA,KAAK;MACZI,KAAK,EAACA;KACP;IACH;IACA,OAAO,IAAI,CAACvB,UAAU,CAACa,GAAG,CAAS,sDAAsD,EAAEC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE;MAACY,OAAO,EAAEL,WAAW;MAAEM,YAAY,EAAE;IAAM,CAAC,CAAC;EAChK;EAEAO,yBAAyB,CAACf,EAAS,EAAEN,QAAe;IAElD,MAAMQ,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMR,IAAI,GACR;MACEK,EAAE,EAACA,EAAE;MACLN,QAAQ,EAACA;KACV;IACH;IACA,OAAO,IAAI,CAACH,UAAU,CAACa,GAAG,CAAS,sDAAsD,EAAEC,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE;MAACY,OAAO,EAAEL,WAAW;MAAEM,YAAY,EAAE;IAAM,CAAC,CAAC;EAChK;EAEAQ,kBAAkB,CAACvB,OAAc,EAAEC,QAAe,EAAEuB,IAAW;IAE7D,MAAMf,WAAW,GAAG,IAAIf,WAAW,EAAE,CAACgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMR,IAAI,GACR;MACEF,OAAO,EAACA,OAAO;MACfC,QAAQ,EAACA,QAAQ;MACjBuB,IAAI,EAACA;KACN;IACH;IACA,OAAO,IAAI,CAAC1B,UAAU,CAACO,IAAI,CAAS,kDAAkD,EAAEO,IAAI,CAACC,SAAS,CAACX,IAAI,CAAC,EAAE;MAACY,OAAO,EAAEL,WAAW;MAAEM,YAAY,EAAE;IAAM,CAAC,CAAC;EAC7J;EAEAU,cAAc,CAAClB,EAAW;IAExB,OAAO,IAAI,CAACT,UAAU,CAAC4B,GAAG,CAAU,GAAG,IAAI,CAACC,OAAO,EAAE,GAAG,GAAG,GAAGpB,EAAE,CAAC;EACnE;EAGAqB,sBAAsB,CAACrB,EAAS;IAE9B;IACA,OAAO,IAAI,CAACT,UAAU,CAAC+B,MAAM,CAAS,mDAAmD,GAAGtB,EAAE,EAAE;MAACQ,YAAY,EAAE;IAAM,CAAC,CAAC;EACzH;EAGAe,MAAM,CAACvB,EAAS,EAAEC,QAAe,EAAER,OAAc,EAAEiB,KAAY,EAAEc,QAAe,EAAEC,QAAe,EAAER,IAAW;IAE5G,MAAMtB,IAAI,GAAG;MACXK,EAAE,EAACA,EAAE;MACLC,QAAQ,EAAEA,QAAQ;MAClBR,OAAO,EAACA,OAAO;MACfiB,KAAK,EAACA,KAAK;MACXc,QAAQ,EAACA,QAAQ;MACjBC,QAAQ,EAACA,QAAQ;MACjBR,IAAI,EAAEA;KACP;IACD,MAAMrB,MAAM,GAAG,IAAIR,UAAU,CAAC;MAC5BS,UAAU,EAAEF;KACb,CAAC;IACF,OAAO,IAAI,CAACJ,UAAU,CAACO,IAAI,CAAY,kDAAkD,EAAEF,MAAM,CAAC;EACpG;EAAC;qBA/HUP,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAqC,SAAdrC,cAAc;IAAAsC,YAFb;EAAM","names":["HttpHeaders","HttpParams","AccountService","constructor","httpClient","login","emailId","password","info","params","fromObject","post","initAccount","id","userName","httpHeaders","set","put","JSON","stringify","headers","responseType","updateAccount","phone","resetPassword","oldPassword","adminUpdateAccount","level","adminResetAccountPassword","adminCreateAccount","role","getAccountById","get","baseURL","adminDeleteAccountById","delete","search","minLevel","maxLevel","factory","providedIn"],"sourceRoot":"","sources":["/Users/namcuong757/eclipse-workspace/CRM-Project/Frontend/src/app/service/account-service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {observable, Observable} from \"rxjs\";\nimport { Account } from \"../model/Account\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService\n{\n\n  private baseURL = \"http://localhost:8080/api/v1/accounts\";\n\n  constructor(private httpClient:HttpClient)\n  { }\n\n  login(emailId:string, password:string):Observable<Account>\n  {\n    const info = {\n      emailId: emailId,\n      password: password\n    }\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post<Account>('http://localhost:8080/api/v1/login', params);\n  }\n\n  initAccount(id:number, userName:string):Observable<string>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info =\n      {\n        id: id,\n        userName: userName\n      }\n    // @ts-ignore\n    return this.httpClient.put<string>('http://localhost:8080/api/v1/user/updateAccount/' + id, JSON.stringify(info), {headers: httpHeaders, responseType: 'text'});\n  }\n\n  updateAccount(id:number, emailId:string, phone:string):Observable<string>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info =\n      {\n        id: id,\n        emailId: emailId,\n        phone: phone\n      }\n    // @ts-ignore\n    return this.httpClient.put<string>('http://localhost:8080/api/v1/user/updateAccount/' + id, JSON.stringify(info), {headers: httpHeaders, responseType: 'text'});\n  }\n\n  resetPassword(id:number, password:string, oldPassword:string):Observable<string>\n  {\n    const info = {\n      id: id,\n      password: password,\n      oldPassword: oldPassword\n    }\n    const params = new HttpParams({\n      fromObject: info\n    });\n    // @ts-ignore\n    return this.httpClient.post<string>('http://localhost:8080/api/v1/user/resetPassword/' + id, params, {responseType: 'text'});\n  }\n\n\n  adminUpdateAccount(id:number, emailId:string, phone:string, level:number,):Observable<string>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info =\n      {\n        id:id,\n        emailId: emailId,\n        phone: phone,\n        level:level\n      }\n    // @ts-ignore\n    return this.httpClient.put<string>('http://localhost:8080/api/v1/admin/updateUserAccount', JSON.stringify(info), {headers: httpHeaders, responseType: 'text'});\n  }\n\n  adminResetAccountPassword(id:number, password:string):Observable<string>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info =\n      {\n        id:id,\n        password:password\n      }\n    // @ts-ignore\n    return this.httpClient.put<string>('http://localhost:8080/api/v1/admin/resetUserPassword', JSON.stringify(info), {headers: httpHeaders, responseType: 'text'});\n  }\n\n  adminCreateAccount(emailId:string, password:string, role:string):Observable<string>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info =\n      {\n        emailId:emailId,\n        password:password,\n        role:role\n      }\n    // @ts-ignore\n    return this.httpClient.post<string>('http://localhost:8080/api/v1/admin/createAccount', JSON.stringify(info), {headers: httpHeaders, responseType: 'text'});\n  }\n\n  getAccountById(id : number):Observable<Account>\n  {\n    return this.httpClient.get<Account>(`${this.baseURL}` + \"/\" + id);\n  }\n\n\n  adminDeleteAccountById(id:number):Observable<string>\n  {\n    // @ts-ignore\n    return this.httpClient.delete<string>(\"http://localhost:8080/api/v1/admin/deleteAccount/\" + id, {responseType: 'text'});\n  }\n\n\n  search(id:number, userName:string, emailId:string, phone:string, minLevel:number, maxLevel:number, role:string):Observable<Account []>\n  {\n    const info = {\n      id:id,\n      userName: userName,\n      emailId:emailId,\n      phone:phone,\n      minLevel:minLevel,\n      maxLevel:maxLevel,\n      role: role\n    }\n    const params = new HttpParams({\n      fromObject: info\n    });\n    return this.httpClient.post<Account[]>('http://localhost:8080/api/v1/admin/searchAccount', params);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}