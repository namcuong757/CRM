{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuestionService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getAllQuestion() {\n    return this.httpClient.get('http://localhost:8080/api/v1/admin/getAllQuestion');\n  }\n  getQuestionByTestId(id) {\n    return this.httpClient.get('http://localhost:8080/api/v1/admin/getQuestionListByTestId/' + id);\n  }\n  addNewQuestion(question) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      question: question.question,\n      style: question.style,\n      body: question.body,\n      answer: question.answer,\n      point: question.point\n    };\n    // @ts-ignore\n    return this.httpClient.post('http://localhost:8080/api/v1/admin/addNewQuestion', JSON.stringify(info), {\n      headers: httpHeaders\n    });\n  }\n  deleteQuestion(id) {\n    // @ts-ignore\n    return this.httpClient.delete('http://localhost:8080/api/v1/admin/deleteQuestionById/' + id, {\n      responseType: 'text'\n    });\n  }\n  updateQuestion(question) {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: question.id,\n      question: question.question,\n      style: question.style,\n      body: question.body,\n      answer: question.answer,\n      point: question.point\n    }; // @ts-ignore\n    return this.httpClient.put('http://localhost:8080/api/v1/admin/uptateQuestion/' + question.id, JSON.stringify(info), {\n      headers: httpHeaders,\n      responseType: 'text'\n    });\n  }\n  static #_ = this.ɵfac = function QuestionService_Factory(t) {\n    return new (t || QuestionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuestionService,\n    factory: QuestionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAmB,sBAAsB;;;AAQxE,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;EAC5B;EAEFC,cAAc;IAEZ,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAa,mDAAmD,CAAC;EAC7F;EAEAC,mBAAmB,CAACC,EAAS;IAE3B,OAAO,IAAI,CAACJ,UAAU,CAACE,GAAG,CAAa,6DAA6D,GAAGE,EAAE,CAAC;EAC5G;EAEAC,cAAc,CAACC,QAAiB;IAE9B,MAAMC,WAAW,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMC,IAAI,GAAG;MACXH,QAAQ,EAAEA,QAAQ,CAACA,QAAQ;MAC3BI,KAAK,EAAKJ,QAAQ,CAACI,KAAK;MACxBC,IAAI,EAAML,QAAQ,CAACK,IAAI;MACvBC,MAAM,EAAIN,QAAQ,CAACM,MAAM;MACzBC,KAAK,EAAKP,QAAQ,CAACO;KACpB;IACD;IACA,OAAO,IAAI,CAACb,UAAU,CAACc,IAAI,CAAW,mDAAmD,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,EAAE;MAACQ,OAAO,EAAEV;IAAW,CAAC,CAAC;EAC1I;EAEAW,cAAc,CAACd,EAAS;IAEtB;IACA,OAAO,IAAI,CAACJ,UAAU,CAACmB,MAAM,CAAS,wDAAwD,GAAGf,EAAE,EAAE;MAACgB,YAAY,EAAE;IAAM,CAAC,CAAC;EAC9H;EAEAC,cAAc,CAACf,QAAiB;IAE9B,MAAMC,WAAW,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAC7E,MAAMC,IAAI,GAAG;MACXL,EAAE,EAAEE,QAAQ,CAACF,EAAE;MACfE,QAAQ,EAAEA,QAAQ,CAACA,QAAQ;MAC3BI,KAAK,EAAKJ,QAAQ,CAACI,KAAK;MACxBC,IAAI,EAAML,QAAQ,CAACK,IAAI;MACvBC,MAAM,EAAIN,QAAQ,CAACM,MAAM;MACzBC,KAAK,EAAKP,QAAQ,CAACO;KACpB;IACD,OAAO,IAAI,CAACb,UAAU,CAACsB,GAAG,CAAS,oDAAoD,GAAGhB,QAAQ,CAACF,EAAE,EAAEW,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,EAAE;MAACQ,OAAO,EAAEV,WAAW;MAAEa,YAAY,EAAE;IAAM,CAAC,CAAC;EAC5K;EAAC;qBA/CUtB,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAyB,SAAfzB,eAAe;IAAA0B,YAFd;EAAM","names":["HttpHeaders","QuestionService","constructor","httpClient","getAllQuestion","get","getQuestionByTestId","id","addNewQuestion","question","httpHeaders","set","info","style","body","answer","point","post","JSON","stringify","headers","deleteQuestion","delete","responseType","updateQuestion","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/namcuong757/eclipse-workspace/CRM-Project/Frontend/src/app/service/question-service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\nimport {HttpClient, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {observable, Observable} from \"rxjs\";\nimport { Question } from \"../model/Question\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService\n{\n  constructor(private httpClient:HttpClient)\n  { }\n\n  getAllQuestion():Observable<Question[]>\n  {\n    return this.httpClient.get<Question[]>('http://localhost:8080/api/v1/admin/getAllQuestion');\n  }\n\n  getQuestionByTestId(id:number):Observable<Question[]>\n  {\n    return this.httpClient.get<Question[]>('http://localhost:8080/api/v1/admin/getQuestionListByTestId/' + id);\n  }\n\n  addNewQuestion(question:Question):Observable<Question>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      question: question.question,\n      style   : question.style,\n      body    : question.body,\n      answer  : question.answer,\n      point   : question.point\n    }\n    // @ts-ignore\n    return this.httpClient.post<Question>('http://localhost:8080/api/v1/admin/addNewQuestion', JSON.stringify(info), {headers: httpHeaders});\n  }\n\n  deleteQuestion(id:number):Observable<string>\n  {\n    // @ts-ignore\n    return this.httpClient.delete<string>('http://localhost:8080/api/v1/admin/deleteQuestionById/' + id, {responseType: 'text'});\n  }\n\n  updateQuestion(question:Question):Observable<string>\n  {\n    const httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n    const info = {\n      id: question.id,\n      question: question.question,\n      style   : question.style,\n      body    : question.body,\n      answer  : question.answer,\n      point   : question.point\n    }// @ts-ignore\n    return this.httpClient.put<string>('http://localhost:8080/api/v1/admin/uptateQuestion/' + question.id, JSON.stringify(info), {headers: httpHeaders, responseType: 'text'});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}