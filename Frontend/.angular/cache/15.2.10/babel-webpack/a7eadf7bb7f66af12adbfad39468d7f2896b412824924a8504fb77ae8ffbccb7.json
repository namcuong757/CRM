{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UserTakeTestView = class UserTakeTestView {\n  constructor(router, cdRef) {\n    this.router = router;\n    this.cdRef = cdRef;\n    this.startTest = false;\n    this.currentQuestion = null;\n    this.currentQuestionIndex = -1;\n    this.questionList = [];\n    this.selectedAnswers = [];\n    this.correctAnswersCount = 0;\n    this.setId = -1;\n    // Timer var\n    this.remainingTime = 20 * 60; // 20 minutes in seconds\n    this.minutes = 0;\n    this.seconds = 0;\n    this.finishTest = false;\n    let question = {\n      questionId: 1,\n      question: \"Char* string = 'Hello world';\\nprintf(\\\"%d\\\", sizeof(string))\",\n      answers: ['A. 4', 'B. 8', 'C. 2', 'D. I don\\'t known'],\n      correctAnswer: 'D. I don\\'t known'\n    };\n    let question1 = {\n      questionId: 2,\n      question: \"How many data type are there in JavaScript)\",\n      answers: ['A. 5', 'B. 7', 'C. 6', 'D. None of the above'],\n      correctAnswer: 'D. None of the above'\n    };\n    let question2 = {\n      questionId: 3,\n      question: \"How many data type are there in C++)\",\n      answers: ['A. 3', 'B. 1', 'C. 5', 'D. 10'],\n      correctAnswer: 'C. 5'\n    };\n    this.questionList = [question, question1, question2, question1];\n    this.selectedAnswers = new Array(this.questionList.length).fill(null);\n  }\n  ngOnInit() {\n    this.setId = this.router.snapshot.params['tid'];\n  }\n  startButton() {\n    this.startTest = true;\n    this.currentQuestionIndex = 0;\n    this.currentQuestion = this.questionList[0];\n    this.updateDisplay();\n    this.startTimer();\n  }\n  nextButton() {\n    this.currentQuestionIndex++;\n    if (this.currentQuestionIndex >= this.questionList.length) {\n      this.currentQuestionIndex = this.questionList.length - 1;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n    //this.cdRef.detectChanges();\n  }\n\n  previousButton() {\n    this.currentQuestionIndex--;\n    if (this.currentQuestionIndex <= -1) {\n      this.currentQuestionIndex = 0;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n    //this.cdRef.detectChanges();\n  }\n\n  captureAnswer(event, questionIndex) {\n    this.selectedAnswers[questionIndex] = event.target.value;\n    //this.cdRef.detectChanges();\n  }\n\n  checkAnswer() {\n    this.startTest = false;\n    this.finishTest = true;\n    this.cdRef.detectChanges();\n    for (let i = 0; i < this.questionList.length; i++) {\n      const correctAnswer = this.questionList[i].correctAnswer;\n      console.log(correctAnswer);\n      if (correctAnswer && this.selectedAnswers[i] && correctAnswer.trim().toLowerCase() === this.selectedAnswers[i].trim().toLowerCase()) {\n        this.correctAnswersCount++;\n      }\n    }\n  }\n  startTimer() {\n    this.timerInterval = setInterval(() => {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n        this.updateDisplay();\n      } else {\n        clearInterval(this.timerInterval);\n        // Logic when timer reaches 0, e.g., submit test automatically\n      }\n    }, 1000);\n  }\n  updateDisplay() {\n    this.minutes = Math.floor(this.remainingTime / 60);\n    this.seconds = this.remainingTime % 60;\n  }\n  ngOnDestroy() {\n    clearInterval(this.timerInterval); // Clear the interval when component is destroyed\n  }\n};\n\nUserTakeTestView = __decorate([Component({\n  selector: 'app-user-question-list-view',\n  templateUrl: './userTakeTestView.html',\n  styleUrls: ['./userTakeTestView.css']\n})], UserTakeTestView);\nexport { UserTakeTestView };","map":{"version":3,"mappings":"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","names":["Component","UserTakeTestView","constructor","router","cdRef","question","questionId","answers","correctAnswer","question1","question2","questionList","selectedAnswers","Array","length","fill","ngOnInit","setId","snapshot","params","startButton","startTest","currentQuestionIndex","currentQuestion","updateDisplay","startTimer","nextButton","previousButton","captureAnswer","event","questionIndex","target","value","checkAnswer","finishTest","detectChanges","i","console","log","trim","toLowerCase","correctAnswersCount","timerInterval","setInterval","remainingTime","clearInterval","minutes","Math","floor","seconds","ngOnDestroy","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/namcuong757/eclipse-workspace/CRM-Project/Frontend/src/app/view/user/userTakeTestView/userTakeTestView.ts"],"sourcesContent":["import {Component, OnInit, ChangeDetectorRef} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-user-question-list-view',\n  templateUrl: './userTakeTestView.html',\n  styleUrls: ['./userTakeTestView.css']\n})\nexport class UserTakeTestView implements OnInit\n{\n  startTest:boolean = false;\n  currentQuestion:any = null;\n  currentQuestionIndex:number = -1;\n  questionList:any = [];\n  selectedAnswers: any[] = [];\n  correctAnswersCount:number = 0;\n  setId:number = -1;\n  // Timer var\n  remainingTime: number = 20 * 60; // 20 minutes in seconds\n  timerInterval: any;\n  minutes: number = 0;\n  seconds: number = 0;\n  finishTest:boolean = false;\n\n  constructor(private router:ActivatedRoute, private cdRef:ChangeDetectorRef )\n  {\n    let question = {questionId:1, question:\"Char* string = 'Hello world';\\nprintf(\\\"%d\\\", sizeof(string))\",\n      answers:['A. 4', 'B. 8', 'C. 2', 'D. I don\\'t known'], correctAnswer:'D. I don\\'t known'}\n    let question1 = {questionId:2, question:\"How many data type are there in JavaScript)\",\n      answers:['A. 5', 'B. 7', 'C. 6', 'D. None of the above'], correctAnswer:'D. None of the above'}\n    let question2 = {questionId:3, question:\"How many data type are there in C++)\",\n      answers:['A. 3', 'B. 1', 'C. 5', 'D. 10'], correctAnswer:'C. 5'}\n      this.questionList = [question,question1,question2,question1] ;\n      this.selectedAnswers = new Array(this.questionList.length).fill(null);\n  }\n\n  ngOnInit(): void\n  {\n    this.setId = this.router.snapshot.params['tid'];\n  }\n\n  startButton()\n  {\n    this.startTest = true;\n    this.currentQuestionIndex = 0;\n    this.currentQuestion = this.questionList[0];\n    this.updateDisplay();\n    this.startTimer();\n\n  }\n  nextButton()\n  {\n    this.currentQuestionIndex++;\n    if(this.currentQuestionIndex >= this.questionList.length)\n    {\n      this.currentQuestionIndex = this.questionList.length - 1;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n    //this.cdRef.detectChanges();\n  }\n\n  previousButton()\n  {\n    this.currentQuestionIndex--;\n    if(this.currentQuestionIndex <= -1)\n    {\n      this.currentQuestionIndex = 0;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n    //this.cdRef.detectChanges();\n  }\n  captureAnswer(event: any, questionIndex: number)\n  {\n    this.selectedAnswers[questionIndex] = event.target.value;\n    //this.cdRef.detectChanges();\n  }\n  checkAnswer()\n  {\n    this.startTest = false;\n    this.finishTest = true;\n    this.cdRef.detectChanges();\n    for (let i = 0; i < this.questionList.length; i++) \n    {\n      const correctAnswer:string = this.questionList[i].correctAnswer;\n      console.log(correctAnswer);\n      if (correctAnswer && this.selectedAnswers[i] && correctAnswer.trim().toLowerCase() === this.selectedAnswers[i].trim().toLowerCase()) {\n        this.correctAnswersCount++;\n      }\n    }\n  }\n  startTimer() {\n    this.timerInterval = setInterval(() => {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n        this.updateDisplay();\n      } else {\n        clearInterval(this.timerInterval);\n        // Logic when timer reaches 0, e.g., submit test automatically\n      }\n    }, 1000);\n  }\n  updateDisplay()\n  {\n    this.minutes = Math.floor(this.remainingTime / 60);\n    this.seconds = this.remainingTime % 60;\n  }\n  ngOnDestroy() \n  {\n    clearInterval(this.timerInterval); // Clear the interval when component is destroyed\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}