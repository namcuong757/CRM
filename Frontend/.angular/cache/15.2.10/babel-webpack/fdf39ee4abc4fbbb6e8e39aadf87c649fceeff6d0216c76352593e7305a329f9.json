{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UserTakeTestView = class UserTakeTestView {\n  constructor(router) {\n    this.router = router;\n    this.startTest = false;\n    this.currentQuestion = null;\n    this.currentQuestionIndex = -1;\n    this.questionList = [];\n    this.selectedAnswers = [];\n    this.correctAnswers = 0;\n    this.setId = -1;\n    // Timer var\n    this.remainingTime = 20 * 60; // 20 minutes in seconds\n    this.minutes = 0;\n    this.seconds = 0;\n    let question = {\n      questionId: 1,\n      question: \"Char* string = 'Hello world';\\nprintf(\\\"%d\\\", sizeof(string))\",\n      answers: ['A. 4', 'B. 8', 'C. 2', 'D. I don\\'t known'],\n      correctAnswer: ['D. I don\\'t known']\n    };\n    let question1 = {\n      questionId: 1,\n      question: \"How many data type are there in JavaScript)\",\n      answers: ['A. 4', 'B. 8', 'C. 2', 'D. I don\\'t known'],\n      correctAnswer: ['D. I don\\'t known']\n    };\n    this.questionList = [question, question1, question, question1];\n  }\n  ngOnInit() {\n    this.setId = this.router.snapshot.params['tid'];\n  }\n  startButton() {\n    this.startTest = true;\n    this.currentQuestionIndex = 1;\n    this.currentQuestion = this.questionList[0];\n  }\n  nextButton() {\n    this.currentQuestionIndex++;\n    if (this.currentQuestionIndex >= this.questionList.length) {\n      this.currentQuestionIndex = this.questionList.length - 1;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n  }\n  previousButton() {\n    this.currentQuestionIndex--;\n    if (this.currentQuestionIndex <= -1) {\n      this.currentQuestionIndex = 0;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n  }\n  captureAnswer(event, questionIndex) {\n    this.selectedAnswers[questionIndex] = event.target.value;\n  }\n  checkAnswer() {\n    this.startTest = false;\n    for (let i = 0; i <= this.questionList.length; i++) {\n      if (this.questionList[i] == this.selectedAnswers[i]) {\n        this.correctAnswers++;\n      }\n    }\n  }\n  startTimer() {\n    this.timerInterval = setInterval(() => {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n        this.updateDisplay();\n      } else {\n        clearInterval(this.timerInterval);\n        // Logic when timer reaches 0, e.g., submit test automatically\n      }\n    }, 1000);\n  }\n  updateDisplay() {\n    this.minutes = Math.floor(this.remainingTime / 60);\n    this.seconds = this.remainingTime % 60;\n  }\n  ngOnDestroy() {\n    clearInterval(this.timerInterval); // Clear the interval when component is destroyed\n  }\n};\n\nUserTakeTestView = __decorate([Component({\n  selector: 'app-user-question-list-view',\n  templateUrl: './userTakeTestView.html',\n  styleUrls: ['./userTakeTestView.css']\n})], UserTakeTestView);\nexport { UserTakeTestView };","map":{"version":3,"mappings":"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","names":["Component","UserTakeTestView","constructor","router","question","questionId","answers","correctAnswer","question1","questionList","ngOnInit","setId","snapshot","params","startButton","startTest","currentQuestionIndex","currentQuestion","nextButton","length","previousButton","captureAnswer","event","questionIndex","selectedAnswers","target","value","checkAnswer","i","correctAnswers","startTimer","timerInterval","setInterval","remainingTime","updateDisplay","clearInterval","minutes","Math","floor","seconds","ngOnDestroy","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/namcuong757/eclipse-workspace/CRM-Project/Frontend/src/app/view/user/userTakeTestView/userTakeTestView.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-user-question-list-view',\n  templateUrl: './userTakeTestView.html',\n  styleUrls: ['./userTakeTestView.css']\n})\nexport class UserTakeTestView implements OnInit\n{\n  startTest:boolean = false;\n  currentQuestion:any = null;\n  currentQuestionIndex:number = -1;\n  questionList:any = [];\n  selectedAnswers: string[] = [];\n  correctAnswers:number = 0;\n  setId:number = -1;\n  // Timer var\n  remainingTime: number = 20 * 60; // 20 minutes in seconds\n  timerInterval: any;\n  minutes: number = 0;\n  seconds: number = 0;\n\n  constructor(private router:ActivatedRoute )\n  {\n    let question = {questionId:1, question:\"Char* string = 'Hello world';\\nprintf(\\\"%d\\\", sizeof(string))\",\n      answers:['A. 4', 'B. 8', 'C. 2', 'D. I don\\'t known'], correctAnswer:['D. I don\\'t known']}\n    let question1 = {questionId:1, question:\"How many data type are there in JavaScript)\",\n      answers:['A. 4', 'B. 8', 'C. 2', 'D. I don\\'t known'], correctAnswer:['D. I don\\'t known']}\n      this.questionList = [question,question1,question,question1] ;\n  }\n\n  ngOnInit(): void\n  {\n    this.setId = this.router.snapshot.params['tid'];\n  }\n\n  startButton()\n  {\n    this.startTest = true;\n    this.currentQuestionIndex = 1;\n    this.currentQuestion = this.questionList[0];\n\n  }\n  nextButton()\n  {\n    this.currentQuestionIndex++;\n    if(this.currentQuestionIndex >= this.questionList.length)\n    {\n      this.currentQuestionIndex = this.questionList.length - 1;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n  }\n\n  previousButton()\n  {\n    this.currentQuestionIndex--;\n    if(this.currentQuestionIndex <= -1)\n    {\n      this.currentQuestionIndex = 0;\n    }\n    this.currentQuestion = this.questionList[this.currentQuestionIndex];\n  }\n  captureAnswer(event: any, questionIndex: number)\n  {\n    this.selectedAnswers[questionIndex] = event.target.value;\n  }\n  checkAnswer()\n  {\n    this.startTest = false;\n    for(let i = 0; i <= this.questionList.length; i++)\n    {\n      if(this.questionList[i] == this.selectedAnswers[i])\n      {\n        this.correctAnswers++;\n      }\n    }\n  }\n  startTimer() {\n    this.timerInterval = setInterval(() => {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n        this.updateDisplay();\n      } else {\n        clearInterval(this.timerInterval);\n        // Logic when timer reaches 0, e.g., submit test automatically\n      }\n    }, 1000);\n  }\n  updateDisplay()\n  {\n    this.minutes = Math.floor(this.remainingTime / 60);\n    this.seconds = this.remainingTime % 60;\n  }\n  ngOnDestroy() \n  {\n    clearInterval(this.timerInterval); // Clear the interval when component is destroyed\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}